//minimal breakpoint mixins
//https://benjaminhorn.io/code/responsive-sass-mixin-helpers/
@mixin breakpoint-from($media) {
  @each $breakpoint in $breakpoints {
    @if $media == nth($breakpoint, 1) {
      @media (min-width: #{nth($breakpoint, 2)})  { @content; }
    }
  }
}
@mixin breakpoint-to($media) {
  @for $i from 1 through length($breakpoints) {
    $breakpoint: nth($breakpoints, $i);
    $name: nth($breakpoint, 1);
    $value: nth($breakpoint, 2);

    @if $media == $name {
      @if $i == 1 {
        $next_breakpoint: nth($breakpoints, $i + 1);
        $next_value: nth($next_breakpoint, 2);
        @media (max-width: #{$next_value - 1px})  { @content; }
      } @else if $i == length($breakpoints) {
        @media (min-width: #{$value})  { @content; }
      } @else {
        $next_breakpoint: nth($breakpoints, $i + 1);
        $next_value: nth($next_breakpoint, 2);

        @media (min-width: #{$value}) and (max-width: #{$next_value - 1px}) { @content; }
      }
    }
  }
}

@mixin breakpoint-until($media) {
  @each $breakpoint in $breakpoints {
    @if $media == nth($breakpoint, 1) {
      @media (max-width: #{nth($breakpoint, 2)})  { @content; }
    }
  }
}

//Outputs HEX colors as HSL color - with separated properties (H/S/L)
@mixin define-hsl-color($color-property, $color){
  $hue: hue($color);
  $saturation: saturation($color);
  $lightness: lightness($color);

  #{$color-property}: unquote("hsl(#{$hue}, #{$saturation}, #{$lightness})");
  #{$color-property}-h: #{$hue};
  #{$color-property}-s: #{$saturation};
  #{$color-property}-l: #{$lightness};
}
